from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, filters, ContextTypes, ConversationHandler
)
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# –ï—Ç–∞–ø–∏ –æ–ø–∏—Ç—É–≤–∞–Ω–Ω—è
NAME, CITY_FROM, CITY_NOW, OCCUPATION, REASON, CRIMEA, USERNAME = range(7)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)  # –§–∞–π–ª JSON –º–∞—î –±—É—Ç–∏ –ø–æ—Ä—è–¥
client = gspread.authorize(creds)
sheet = client.open("Nomad Applications").sheet1  # –ù–∞–∑–≤–∞ —Ç–∞–±–ª–∏—Ü—ñ

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "–ø—Ä–∏–≤—ñ—Ç! –∑–∞–ø–æ–≤–Ω–∏ –∫–æ—Ä–æ—Ç–∫—É –∑–∞—è–≤–∫—É ‚Äî –º–∏ –ø–µ—Ä–µ–≥–ª—è–Ω–µ–º–æ —ó—ó –∑ —Ç—É—Ä–±–æ—Ç–æ—é —ñ —è–∫–Ω–∞–π—à–≤–∏–¥—à–µ –Ω–∞–¥—ñ—à–ª–µ–º–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –≤ —á–∞—Ç, —è–∫—â–æ –≤—Å–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è :) ü™ø\n\n"
        "The Nom√°d Circle ‚Äî —Ü–µ –ø—Ä–æ—Å—Ç—ñ—Ä –¥–ª—è —Å–≤—ñ–¥–æ–º–∏—Ö —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤, —è–∫—ñ —Ü—ñ–Ω—É—é—Ç—å –∫—É–ª—å—Ç—É—Ä—É, –≤–∞–∂–ª–∏–≤—ñ —Å–µ–Ω—Å–∏ —ñ –≤–∑–∞—î–º–Ω—É –ø—ñ–¥—Ç—Ä–∏–º–∫—É ü™¢\n\n"
        "—Ç—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à –∑–Ω–∞–π—Ç–∏ —Ç–≤–æ—Ä—á—ñ –∫–æ–ª–∞–±–æ—Ä–∞—Ü—ñ—ó, —Ö–æ—Å—Ç–∏–Ω–≥ —É –Ñ–≤—Ä–æ–ø—ñ —Ç–∞ —Å–≤—ñ—Ç—ñ –∞–±–æ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Ä–∞–¥–∏ –≤—ñ–¥ —É–∫—Ä–∞—ó–Ω—Ü—ñ–≤ –∑–∞ –∫–æ—Ä–¥–æ–Ω–æ–º üì®"
    )
    keyboard = [[InlineKeyboardButton("—Å—Ç–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é —Å–ø—ñ–ª—å–Ω–æ—Ç–∏ üçΩÔ∏è", callback_data="join")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_text, reply_markup=reply_markup)

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("–∑–∞—è–≤–∫–∞ –∫–æ—Ä–æ—Ç–∫–∞, –∞–ª–µ –¥—É–∂–µ –≤–∞–∂–ª–∏–≤–∞ –¥–ª—è –Ω–∞—Å ‚Äî –¥—è–∫—É—î–º–æ –∑–∞ –ø—Ä–∏–¥—ñ–ª–µ–Ω—ñ –ø–∞—Ä—É —Ö–≤–∏–ª–∏–Ω ü´Ç")
    await query.message.reply_text("1. —è–∫ —Ç–µ–±–µ –∑–≤–∞—Ç–∏?")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("2. –∑ —è–∫–æ–≥–æ —Ç–∏ –º—ñ—Å—Ç–∞?")
    return CITY_FROM

async def get_city_from(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city_from"] = update.message.text
    await update.message.reply_text("3. –≤ —è–∫–æ–º—É –º—ñ—Å—Ç—ñ –∂–∏–≤–µ—à –∑–∞—Ä–∞–∑?")
    return CITY_NOW

async def get_city_now(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["city_now"] = update.message.text
    await update.message.reply_text("4. —á–∏–º —Ç–∏ –∑–∞–π–º–∞—î—à—Å—è?")
    return OCCUPATION

async def get_occupation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["occupation"] = update.message.text
    await update.message.reply_text("5. —á–æ–º—É —Ö–æ—á–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—å –¥–æ The Nom√°d Circle?")
    return REASON

async def get_reason(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["reason"] = update.message.text
    await update.message.reply_text("6. —á–∏–π –ö—Ä–∏–º?")
    return CRIMEA

async def get_crimea(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["crimea"] = update.message.text
    await update.message.reply_text("7. –≤–≤–µ–¥–∏ —Å–≤—ñ–π telegram username –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –∑–≤ º—è–∑–∫—Éüì°")
    return USERNAME

async def get_username(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["username"] = update.message.text
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ —Ç–∞–±–ª–∏—Ü—é
    sheet.append_row([
        context.user_data["name"],
        context.user_data["city_from"],
        context.user_data["city_now"],
        context.user_data["occupation"],
        context.user_data["reason"],
        context.user_data["crimea"],
        context.user_data["username"]
    ])
    
    await update.message.reply_text(
        "–¥—è–∫—É—î–º–æ –∑–∞ —â–∏—Ä—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ!\n"
        "–º–∏ –ø–µ—Ä–µ–≥–ª—è–Ω–µ–º–æ –∑–∞—è–≤–∫—É –∑ —Ç—É—Ä–±–æ—Ç–æ—é —ñ –Ω–∞–¥—ñ—à–ª–µ–º–æ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º üì©\n\n"
        "–°–ª–∞–≤–∞ –£–∫—Ä–∞—ó–Ω—ñ!"
    )
    return ConversationHandler.END

# –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    return ConversationHandler.END

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
def main():
    app = ApplicationBuilder().token("7548553265:AAHO7oIvX-kXlxVtO0aniAhkxE5vP68m3JA").build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button, pattern="join")],
        states={
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            CITY_FROM: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city_from)],
            CITY_NOW: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_city_now)],
            OCCUPATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_occupation)],
            REASON: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_reason)],
            CRIMEA: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_crimea)],
            USERNAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_username)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ!")
    app.run_polling()

if __name__ == "__main__":
    main()
